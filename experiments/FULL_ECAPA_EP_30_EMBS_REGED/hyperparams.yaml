# Generated 2021-04-27 from:
# /home/od/speechbrain_multiling/recipes/CommonVoice/LID/train/hparams/train_ecapa.yaml
# yamllint disable
# #################################
# Basic training parameters for language-id. We have first a network that
# computes some embeddings. On the top of that, we employ a classifier.
#
# Author:
#  * Pavlo Ruban 2021
#  * Oleksandr Dymov 2021
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1986
__set_seed: !!python/object/apply:torch.manual_seed [1986]

# Set up folders for reading from and writing to
# Dataset will be downloaded to the `data_folder`

data_folder: /home/od/common_voice_kpd
output_folder: /home/od/EXPERIMENTS/FULL_ECAPA_EP_30_EMBS_REGED
save_folder: /home/od/EXPERIMENTS/FULL_ECAPA_EP_30_EMBS_REGED/save
train_log: /home/od/EXPERIMENTS/FULL_ECAPA_EP_30_EMBS_REGED/train_log.txt
predict_dataset: [train, dev]
max_duration:      # Maximum duration of training audio
apply_augmentation: true
apply_env_corruption: true
use_pretrained_modules: true
freeze_emeddings: false
skip_prep: false

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
  save_file: /home/od/EXPERIMENTS/FULL_ECAPA_EP_30_EMBS_REGED/train_log.txt

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
  metric: !name:speechbrain.nnet.losses.classification_error
    reduction: batch

# Feature parameters btw: 40 - 80
n_mels: 80

# Training Parameters
sample_rate: 16000
number_of_epochs: 30
batch_size: 4
n_languages: 45
topk: 3
emb_dim: 192 # dimensionality of the embeddings

# Dataloaders
train_dataloader_options:
  batch_size: 4
  drop_last: true
  shuffle: true

test_dataloader_options:
  batch_size: 4
  shuffle: true

# Added noise and reverb come from OpenRIR dataset, automatically
# downloaded and prepared with this Environmental Corruption class.
env_corrupt: &id002 !new:speechbrain.lobes.augment.EnvCorrupt
  openrir_folder: /home/od/common_voice_kpd
  openrir_max_noise_len: 3.0    # seconds
  babble_prob: 0.0
  reverb_prob: 1.0
  noise_prob: 1.0
  noise_snr_low: 0
  noise_snr_high: 15
  rir_scale_factor: 1.0

# Adds speech change + time and frequency dropouts (time-domain implementation)
# A small speed change help to improve the performance of speaker-id as well.
augmentation: &id003 !new:speechbrain.lobes.augment.TimeDomainSpecAugment
  sample_rate: 16000
  speeds: [95, 100, 105]

# Feature extraction
compute_features: &id001 !new:speechbrain.lobes.features.Fbank
  n_mels: 80

# TODO Try MFCC instead of FBanks
# compute_features: !new:speechbrain.lobes.features.MFCC
#     n_mels: !ref <n_mels>
#     requires_grad: True # Learn filters

# Mean and std normalization of the input features
mean_var_norm_input: &id005 !new:speechbrain.processing.features.InputNormalization
  norm_type: sentence
    # requires_grad: True
  std_norm: false

# To design a custom model, either just edit the simple CustomModel
# class that's listed here, or replace this `!new` call with a line
# pointing to a different file you've defined.

# Embedding Model
embedding_model: &id004 !new:speechbrain.lobes.models.ECAPA_TDNN.ECAPA_TDNN
        # mean_var_norm_emb: !ref <mean_var_norm_emb>
  input_size: 80
  activation: !name:torch.nn.LeakyReLU
  channels: [1024, 1024, 1024, 1024, 3072]
  kernel_sizes: [5, 3, 3, 3, 1]
  dilations: [1, 2, 3, 4, 1]
  attention_channels: 128
  lin_neurons: 192

# Embedding Normalization
mean_var_norm_emb: &id006 !new:speechbrain.processing.features.InputNormalization
  norm_type: global
    # requires_grad: True
  std_norm: false

# Classifier
# classifier: !new:speechbrain.lobes.models.ECAPA_TDNN.Classifier
#     input_size: !ref <emb_dim>
#     lin_blocks: 0
#     lin_neurons: !ref <emb_dim>
#     out_neurons: !ref <n_languages>

classifier: &id007 !new:train.CosClassifier

# Loss functions
# NLL loss 
# compute_cost: !name:speechbrain.nnet.losses.nll_loss

# Angular Margin
# compute_cost: !new:speechbrain.nnet.losses.LogSoftmaxWrapper
#     loss_fn: !new:speechbrain.nnet.losses.AngularMargin
#         margin: 0.2
#         scale: 30

# Additive Angular Margin
  input_size: 192
  out_neurons: 45


# Classifier
# classifier: !new:speechbrain.lobes.models.Xvector.Classifier
#     input_shape: [null, null, !ref <emb_dim>]
#     lin_blocks: 1
#     lin_neurons: !ref <emb_dim>
#     out_neurons: !ref <n_languages>

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: &id008 !new:speechbrain.utils.epoch_loop.EpochCounter

  limit: 30

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
  compute_features: *id001
  env_corrupt: *id002
  augmentation: *id003
  embedding_model: *id004
  mean_var_norm_input: *id005
  mean_var_norm_emb: *id006
  classifier: *id007
compute_cost: !new:speechbrain.nnet.losses.LogSoftmaxWrapper
  loss_fn: !new:speechbrain.nnet.losses.AdditiveAngularMargin
    margin: 0.2
    scale: 30

# compute_emb_cost: !new:utils.LossWrapper
#     loss_fn: !new:pytorch_metric_learning.losses.TripletMarginLoss
#     miner_fn: !new:pytorch_metric_learning.miners.TripletMarginMiner

lr: 0.001
base_lr: 0.00000001
max_lr: 0.001
step_size: 65000

# compute_cost: !name:torch.nn.functional.cross_entropy

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
opt_class: !name:torch.optim.Adam
  lr: 0.001
  weight_decay: 0.000002

# This function manages learning rate annealing over the epochs.
# We here use the simple lr annealing method that linearly decreases
# the lr from the initial value to the final one.
# lr_annealing: !new:speechbrain.nnet.schedulers.LinearScheduler
#     initial_value: !ref <lr_start>
#     final_value: !ref <lr_final>
#     epoch_count: !ref <number_of_epochs>

lr_annealing: !new:speechbrain.nnet.schedulers.CyclicLRScheduler
  base_lr: 0.00000001
  max_lr: 0.001
  step_size: 65000

# lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
#     initial_value: !ref <lr_start>
#     improvement_threshold: 0.0025
#     annealing_factor: 0.8
#     patient: 0

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: /home/od/EXPERIMENTS/FULL_ECAPA_EP_30_EMBS_REGED/save
  recoverables:
    compute_features: *id001
    normalizer_input: *id005
    embedding_model: *id004
    normalizer_emb: *id006
    classifier: *id007
    counter: *id008
ckpt_interval_minutes: 60 # save checkpoint every N min

# Load fine-tuned modules
embedding_model_path: speechbrain/spkrec-ecapa-voxceleb/embedding_model.ckpt

# Pretrained ECAPA embeddings from SpeakerID on VoxCeleb
pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
  collect_in: /home/od/EXPERIMENTS/FULL_ECAPA_EP_30_EMBS_REGED/save
  loadables:
        # mean_var_norm_input: !ref <mean_var_norm_input>
    embedding_model: *id004
  paths:
        # mean_var_norm_input: !ref <mean_var_norm_input_path>
    embedding_model: speechbrain/spkrec-ecapa-voxceleb/embedding_model.ckpt
        # mean_var_norm_emb: !ref <mean_var_norm_emb_path>
