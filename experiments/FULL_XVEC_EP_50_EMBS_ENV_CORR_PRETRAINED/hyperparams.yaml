# Generated 2021-04-23 from:
# /content/speechbrain_multiling/recipes/CommonVoice/LID/train/hparams/train_xvectors.yaml
# yamllint disable
# #################################
# Basic training parameters for speaker-id. We have first a network that
# computes some embeddings. On the top of that, we employ a classifier.
#
# Author:
#  * Pavlo Ruban 2021
#  * Oleksandr Dymov 2021
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1986
__set_seed: !!python/object/apply:torch.manual_seed [1986]

# Set up folders for reading from and writing to
# Dataset will be downloaded to the `data_folder`

data_folder: /content/common_voice_kpd
output_folder: /content/drive/MyDrive/IFT6758-AP/Project/FULL_XVEC_EP_50_EMBS_ENV_CORR_PRETRAINED
save_folder: /content/drive/MyDrive/IFT6758-AP/Project/FULL_XVEC_EP_50_EMBS_ENV_CORR_PRETRAINED/save
train_log: /content/drive/MyDrive/IFT6758-AP/Project/FULL_XVEC_EP_50_EMBS_ENV_CORR_PRETRAINED/train_log.txt
predict_dataset: [train, dev]
max_duration:      # Maximum duration of training audio
apply_augmentation: true
apply_env_corruption: true
use_pretrained_modules: true
skip_prep: false

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
  save_file: /content/drive/MyDrive/IFT6758-AP/Project/FULL_XVEC_EP_50_EMBS_ENV_CORR_PRETRAINED/train_log.txt

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
  metric: !name:speechbrain.nnet.losses.classification_error
    reduction: batch

ckpt_interval_minutes: 30 # save checkpoint every N min

# Feature parameters btw: 40 - 80
n_mels: 24

# Training Parameters
sample_rate: 16000
number_of_epochs: 50
batch_size: 16
lr_start: 0.001
lr_final: 0.0001
n_languages: 45 # 2 - tiny, 5 - mini, 10 - similar, 45 - full
topk: 3
emb_dim: 512 # dimensionality of the embeddings

# # Training parameters
# number_of_epochs: 30
# batch_size: 4
# lr: 0.001
base_lr: 0.0000001
max_lr: 0.0001
step_size: 65000
# sample_rate: 16000
# emb_dim: 192

# Dataloaders
train_dataloader_options:
  batch_size: 16
  drop_last: true
  shuffle: true

test_dataloader_options:
  batch_size: 16
  shuffle: true

# Added noise and reverb come from OpenRIR dataset, automatically
# downloaded and prepared with this Environmental Corruption class.
env_corrupt: &id002 !new:speechbrain.lobes.augment.EnvCorrupt
  openrir_folder: /content/common_voice_kpd
  openrir_max_noise_len: 3.0    # seconds
  babble_prob: 0.0
  reverb_prob: 1.0
  noise_prob: 1.0
  noise_snr_low: 0
  noise_snr_high: 15
  rir_scale_factor: 1.0

# Adds speech change + time and frequency dropouts (time-domain implementation)
# A small speed change help to improve the performance of speaker-id as well.
augmentation: &id003 !new:speechbrain.lobes.augment.TimeDomainSpecAugment
  sample_rate: 16000
  speeds: [95, 100, 105]

# Feature extraction
compute_features: &id001 !new:speechbrain.lobes.features.Fbank
  sample_rate: 16000
  n_mels: 24

# Mean and std normalization of the input features
mean_var_norm_input: &id006 !new:speechbrain.processing.features.InputNormalization
  norm_type: sentence
  requires_grad: true
  std_norm: false

# Embedding Model
embedding_model: &id004 !new:speechbrain.lobes.models.Xvector.Xvector
        # mean_var_norm_emb: !ref <mean_var_norm_emb>
  in_channels: 24
  activation: !name:torch.nn.LeakyReLU
  tdnn_blocks: 5
  tdnn_channels: [512, 512, 512, 512, 1500]
  tdnn_kernel_sizes: [5, 3, 3, 1, 1]
  tdnn_dilations: [1, 2, 3, 1, 1]
  lin_neurons: 512

# Embedding Normalization
mean_var_norm_emb: &id007 !new:speechbrain.processing.features.InputNormalization

# Loss function
# compute_cost: !name:speechbrain.nnet.losses.nll_loss

  norm_type: global
  requires_grad: true
  std_norm: false


# classifier: !new:custom_model.DoubleClassifier
#     input_shape: [null, null, !ref <emb_dim>]
#     activation: !name:torch.nn.ReLU # !name:torch.nn.LeakyReLU
#     lin_blocks: 1
#     lin_blocks_dropout: 0.3
#     lin_neurons: !ref <emb_dim>
#     num_parents: !ref <n_lang_families>
#     num_leaves: !ref <n_languages>

out_neurons: 45

# Classifier
# classifier: !new:speechbrain.lobes.models.Xvector.Classifier
#     input_shape: [null, null, !ref <emb_dim>]
#     activation: !name:torch.nn.LeakyReLU
#     lin_blocks: 0
#     lin_neurons: !ref <emb_dim>
#     out_neurons: !ref <n_languages>

classifier: &id005 !new:speechbrain.lobes.models.ECAPA_TDNN.Classifier
  input_size: 512
  lin_blocks: 0
  lin_neurons: 512
  out_neurons: 45

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: &id008 !new:speechbrain.utils.epoch_loop.EpochCounter

# Load fine-tuned modules
  limit: 50

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
  compute_features: *id001
  env_corrupt: *id002
  augmentation: *id003
  embedding_model: *id004
  classifier: *id005
  mean_var_norm_input: *id006
  mean_var_norm_emb: *id007
compute_cost: !new:speechbrain.nnet.losses.LogSoftmaxWrapper
  loss_fn: !new:speechbrain.nnet.losses.AdditiveAngularMargin
    margin: 0.2
    scale: 30

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
opt_class: !name:torch.optim.Adam
  lr: 0.001
  weight_decay: 0.000002

# This function manages learning rate annealing over the epochs.
# We here use the simple lr annealing method that linearly decreases
# the lr from the initial value to the final one.
# lr_annealing: !new:speechbrain.nnet.schedulers.LinearScheduler
#     initial_value: !ref <lr_start>
#     final_value: !ref <lr_final>
#     epoch_count: !ref <number_of_epochs>

lr_annealing: !new:speechbrain.nnet.schedulers.CyclicLRScheduler
  base_lr: 0.0000001
  max_lr: 0.0001
  step_size: 65000

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: /content/drive/MyDrive/IFT6758-AP/Project/FULL_XVEC_EP_50_EMBS_ENV_CORR_PRETRAINED/save
  recoverables:
    normalizer_input: *id006
    embedding_model: *id004
    normalizer_emb: *id007
    classifier: *id005
    counter: *id008
embedding_model_path: /content/embedding_model.ckpt

# Pretrained ECAPA embeddings from SpeakerID on VoxCeleb
pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
  collect_in: /content/drive/MyDrive/IFT6758-AP/Project/FULL_XVEC_EP_50_EMBS_ENV_CORR_PRETRAINED/save
  loadables:
        # mean_var_norm_input: !ref <mean_var_norm_input>
    embedding_model: *id004
  paths:
        # mean_var_norm_input: !ref <mean_var_norm_input_path>
    embedding_model: /content/embedding_model.ckpt
        # mean_var_norm_emb: !ref <mean_var_norm_emb_path>
