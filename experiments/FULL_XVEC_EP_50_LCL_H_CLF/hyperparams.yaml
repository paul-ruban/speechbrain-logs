# Generated 2021-04-14 from:
# /home/guest442/speechbrain_multiling/recipes/CommonVoice/LID/train/hparams/train_xvectors.yaml
# yamllint disable
# #################################
# Basic training parameters for speaker-id. We have first a network that
# computes some embeddings. On the top of that, we employ a classifier.
#
# Author:
#  * Mirco Ravanelli 2021
#  * Pavlo Ruban 2021
#  * Oleksandr Dymov 2021
# #################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1986
__set_seed: !!python/object/apply:torch.manual_seed [1986]

# Set up folders for reading from and writing to
# Dataset will be downloaded to the `data_folder`

data_folder: /localscratch/guest442.635631.0/common_voice_kpd/
output_folder: /home/guest442/EXPERIMENTS/FULL_XVEC_EP_50_LCL_H_CLF
save_folder: /home/guest442/EXPERIMENTS/FULL_XVEC_EP_50_LCL_H_CLF/save
train_log: /home/guest442/EXPERIMENTS/FULL_XVEC_EP_50_LCL_H_CLF/train_log.txt
predict_dataset: [train, dev]
max_duration:      # No cutting
skip_prep: false
# pretrained: True # Use pretrained embeddings
# freeze_emb: False # Freeze or fine-tune embeddings
normalize_emb: true # Normalize embeddings

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
  save_file: /home/guest442/EXPERIMENTS/FULL_XVEC_EP_50_LCL_H_CLF/train_log.txt

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
  metric: !name:speechbrain.nnet.losses.classification_error
    reduction: batch

ckpt_interval_minutes: 30 # save checkpoint every N min

# Feature parameters btw: 40 - 80
n_mels: 24

# Training Parameters
sample_rate: 16000
number_of_epochs: 50
batch_size: 16
lr_start: 0.001
lr_final: 0.0001
n_lang_families: 24 # 2 - tiny, 3 - mini, 6 - similar, 24 - full
n_languages: 45 # 2 - tiny, 5 - mini, 10 - similar, 45 - full
out_neurons: 69
# out_neurons: !ref <n_languages>
emb_dim: 512 # dimensionality of the embeddings

# Dataloaders
train_dataloader_options:
  batch_size: 16
  drop_last: true
  shuffle: true

test_dataloader_options:
  batch_size: 16
  shuffle: true

# Added noise and reverb come from OpenRIR dataset, automatically
# downloaded and prepared with this Environmental Corruption class.
# env_corrupt: !new:speechbrain.lobes.augment.EnvCorrupt
#     openrir_folder: !ref <data_folder>
#     babble_prob: 0.0
#     reverb_prob: 0.0
#     noise_prob: 1.0
#     noise_snr_low: 0
#     noise_snr_high: 15
#     rir_scale_factor: 1.0

# Adds speech change + time and frequency dropouts (time-domain implementation)
# # A small speed change help to improve the performance of speaker-id as well.
# augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
#     sample_rate: !ref <sample_rate>
#     speeds: [95, 100, 105]

# Feature extraction
compute_features: &id001 !new:speechbrain.lobes.features.Fbank
    # env_corrupt: !ref <env_corrupt>
    # augmentation: !ref <augmentation>
  sample_rate: 16000
  n_mels: 24

# Mean and std normalization of the input features
mean_var_norm_input: &id004 !new:speechbrain.processing.features.InputNormalization
  norm_type: sentence
  std_norm: false

# Embedding Model
embedding_model: &id002 !new:speechbrain.lobes.models.Xvector.Xvector
  in_channels: 24
  activation: !name:torch.nn.LeakyReLU
  tdnn_blocks: 5
  tdnn_channels: [512, 512, 512, 512, 1500]
  tdnn_kernel_sizes: [5, 3, 3, 1, 1]
  tdnn_dilations: [1, 2, 3, 1, 1]
  lin_neurons: 512

# Embedding Normalization
mean_var_norm_emb: &id005 !new:speechbrain.processing.features.InputNormalization

# Loss function
  norm_type: global
  std_norm: false

# Classifier
classifier: &id003 !new:custom_model.Classifier
  input_shape: [!!null '', !!null '', 512]
  activation: !name:torch.nn.ReLU
                                    # !name:torch.nn.LeakyReLU
  lin_blocks: 1
  lin_blocks_dropout:
  lin_neurons: 512
  out_neurons: 69

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: &id006 !new:speechbrain.utils.epoch_loop.EpochCounter


# Load pre-trained modules from HuggingFace
# embedding_model_path: speechbrain/spkrec-xvect-voxceleb/embedding_model.ckpt
# mean_var_norm_emb_path: speechbrain/spkrec-xvect-voxceleb/mean_var_norm_emb.ckpt

# Load fine-tuned modules from Drive
# embedding_model_path: /content/embedding_model.ckpt
# mean_var_norm_emb_path: /content/normalizer_emb.ckpt

# Pretrained ECAPA embeddings from SpeakerID on VoxCeleb
# pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
#     collect_in: !ref <save_folder>
#     loadables: 
#         embedding_model: !ref <embedding_model>
#         mean_var_norm_emb: !ref <mean_var_norm_emb>
#     paths:
#         embedding_model: !ref <embedding_model_path>
#         mean_var_norm_emb: !ref <mean_var_norm_emb_path>
  limit: 50

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
  compute_features: *id001
  embedding_model: *id002
  classifier: *id003
  mean_var_norm_input: *id004
  mean_var_norm_emb: *id005
compute_cost: !name:torch.nn.functional.cross_entropy

# # Center Loss
# compute_center_loss: !new:custom_model.CenterLoss
#     num_classes: !ref <n_languages>
#     emb_dim: !ref <emb_dim>
#     alpha: 0.1
#     lmbda: 0

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
opt_class: !name:torch.optim.Adam
  lr: 0.001
    # weight_decay: 0.000002

# This function manages learning rate annealing over the epochs.
# We here use the simple lr annealing method that linearly decreases
# the lr from the initial value to the final one.
# lr_annealing: !new:speechbrain.nnet.schedulers.LinearScheduler
#     initial_value: !ref <lr_start>
#     final_value: !ref <lr_final>
#     epoch_count: !ref <number_of_epochs>

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: /home/guest442/EXPERIMENTS/FULL_XVEC_EP_50_LCL_H_CLF/save
  recoverables:
    embedding_model: *id002
    classifier: *id003
    normalizer_input: *id004
    normalizer_emb: *id005
    counter: *id006
